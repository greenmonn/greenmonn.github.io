<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-01-01T17:51:06+09:00</updated><id>http://localhost:4000/</id><title type="html">greenmonn.github.io</title><entry><title type="html">부트스트랩 말고도 엄청 많은 UI Framework 모음</title><link href="http://localhost:4000/2018/12/31/ui-framework.html" rel="alternate" type="text/html" title="부트스트랩 말고도 엄청 많은 UI Framework 모음" /><published>2018-12-31T00:00:00+09:00</published><updated>2018-12-31T00:00:00+09:00</updated><id>http://localhost:4000/2018/12/31/ui-framework</id><content type="html" xml:base="http://localhost:4000/2018/12/31/ui-framework.html">&lt;h2 id=&quot;twitter-bootstrap&quot;&gt;Twitter Bootstrap&lt;/h2&gt;
&lt;p&gt;Responsive, Mobile-First를 지향하는, 가장 보편적이고 잘 알려진 프레임워크.&lt;/p&gt;

&lt;p&gt;CSS 프리프로세서인 &lt;code class=&quot;highlighter-rouge&quot;&gt;Less&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Sass&lt;/code&gt;를 사용한다. 프리컴파일된 CSS를 바로 사용할 수도 있고, 소스를 빌드해서 사용할 수도 있다.&lt;/p&gt;

&lt;p&gt;JQuery 플러그인과 함께 많이 쓰인다.&lt;/p&gt;

&lt;p&gt;지원하는 컴포넌트가 매우 광범위하기 때문에 로드하는 데 시간이 많이 걸린다. 웹사이트를 무겁게 하는 주범이라는 비판이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://bootstrapk.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;zurb-foundation&quot;&gt;ZURB Foundation&lt;/h2&gt;
&lt;p&gt;Responsive Design을 위한 진보적인 프레임워크. 부트스트랩과 같은 (그러나 훨씬 좋은) Grid System을 구현한다. 또한, &lt;code class=&quot;highlighter-rouge&quot;&gt;Sass&lt;/code&gt;를 사용하며 자동 빌드를 지원한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://foundation.zurb.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bulma&quot;&gt;Bulma&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flexbox&lt;/code&gt;를 기반으로 구현된 CSS 프레임워크. 하나의 CSS 파일만으로 사용이 가능하다. CSS class의 collection으로 이루어져 있기 때문에 필요한 기능만 떼어서 사용하기 매우 간편하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://bulma.io&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;skeleton&quot;&gt;Skeleton&lt;/h2&gt;
&lt;p&gt;작은 프로젝트에 알맞게 필수적인 컴포넌트만을 담았다. 모바일 환경에 최적화된 반응형을 지원하고, 12 column의 fluid grid로 구성된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://getskeleton.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cardinalcss&quot;&gt;CardinalCSS&lt;/h2&gt;
&lt;p&gt;퍼포먼스와 코드 가독성, 유지보수에 초점을 둔 CSS 프레임워크이다. grid를 구성하는 데에 현대적인 기술과 CSS Box Model을 사용했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://cardinalcss.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;consisecss&quot;&gt;ConsiseCSS&lt;/h2&gt;
&lt;p&gt;필수적인 요소에 대한 기본 스타일로 이루어진 간결한 프레임워크. headings, paragraphs, tables, forms에 대한 서식과 button UI를 위한 helper class들로 이루어져 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://concisecss.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;furtive&quot;&gt;Furtive&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flexbox&lt;/code&gt;로 이루어진 grid 구조와 &lt;code class=&quot;highlighter-rouge&quot;&gt;rem&lt;/code&gt; unit을 사용해서 구현된 CSS framework이다. 최신 웹표준에 맞게 설계되었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://furtive.co/&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mueller&quot;&gt;Mueller&lt;/h2&gt;
&lt;p&gt;HTML element에 직접 추가하거나 javascript function으로 grid를 적용할 수 있다. Pinterest 같은 레이아웃을 만드는 데 적합하다고 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://muellergridsystem.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;toast&quot;&gt;Toast&lt;/h2&gt;
&lt;p&gt;grid class name, column 기본값 등을 커스터마이즈할 수 있다. 유연한 설정이 가능한 것이 장점이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://daneden.github.io/Toast/&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="web" /><category term="css" /><summary type="html">Twitter Bootstrap Responsive, Mobile-First를 지향하는, 가장 보편적이고 잘 알려진 프레임워크.</summary></entry><entry><title type="html">Socket.IO 알아보기</title><link href="http://localhost:4000/2018/12/02/socket-io.html" rel="alternate" type="text/html" title="Socket.IO 알아보기" /><published>2018-12-02T00:00:00+09:00</published><updated>2018-12-02T00:00:00+09:00</updated><id>http://localhost:4000/2018/12/02/socket-io</id><content type="html" xml:base="http://localhost:4000/2018/12/02/socket-io.html">&lt;h2 id=&quot;what-socketio-is&quot;&gt;What socket.io is&lt;/h2&gt;

&lt;p&gt;Socket.IO is a library that enables real-time, bidirectional and event-based communication between the browser and the server. It consists of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt; server and a javascript client library for the browser. (which can be also run from Node.js)&lt;/p&gt;

&lt;h2 id=&quot;what-socketio-is-not&quot;&gt;What socket.io is not&lt;/h2&gt;

&lt;p&gt;Socket.IO is not a &lt;code class=&quot;highlighter-rouge&quot;&gt;WebSocket&lt;/code&gt; implementation. Although Socket.IO indeed uses WebSocket as a transport when possible, it adds some metadata to each packet: &lt;code class=&quot;highlighter-rouge&quot;&gt;the packet type, the namespace and the ack id&lt;/code&gt; when a message acknowledgement is needed. That is why a WebSocket client will not be able to successfully connect to a Socket.IO server, and a Socket.IO client will not be able to connect to a WebSocket server either.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/socketio/socket.io-protocol&quot;&gt;Protocol Specification&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://d2.naver.com/helloworld/1336&quot;&gt;Socket.IO vs. WebSocket&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="web" /><category term="javascript" /><summary type="html">What socket.io is</summary></entry><entry><title type="html">Golang에서 object copy 개념 짚고 넘어가기</title><link href="http://localhost:4000/2018/11/27/object-copy.html" rel="alternate" type="text/html" title="Golang에서 object copy 개념 짚고 넘어가기" /><published>2018-11-27T00:00:00+09:00</published><updated>2018-11-27T00:00:00+09:00</updated><id>http://localhost:4000/2018/11/27/object-copy</id><content type="html" xml:base="http://localhost:4000/2018/11/27/object-copy.html">&lt;p&gt;When creating copies of arrays or objects one can make a deep copy or a shallow copy.&lt;/p&gt;

&lt;h2 id=&quot;shallow-copy&quot;&gt;Shallow Copy&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/https://cdncontribute.geeksforgeeks.org/wp-content/uploads/shallow-copy.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/https://www.cs.utexas.edu/~scottm/images/deep_v1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In case of shallow copy, a reference of object is copied in other object. It means that any changes made to a copy of object do reflect in the original object.&lt;/p&gt;

&lt;h3 id=&quot;shallow-copy-example-in-go&quot;&gt;Shallow Copy Example in Go&lt;/h3&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copied&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copied&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;deep-copy&quot;&gt;Deep Copy&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/https://cdncontribute.geeksforgeeks.org/wp-content/uploads/deep-copy.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/https://www.cs.utexas.edu/~scottm/images/deep_v3.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In case of deep copy, a copy of object is copied in other object. It means that any changes made to a copy of object do not reflect in the original object.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The difference between shallow and deep copying is only relevant for &lt;strong&gt;compound objects&lt;/strong&gt; (objects that contain other objects, like lists or class instances).
A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.
A deep copy constructs a new compound object and then, &lt;strong&gt;recursively&lt;/strong&gt;, inserts copies into it of the objects found in the original.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.cs.utexas.edu/~scottm/cs307/handouts/deepCopying.htm&lt;/li&gt;
  &lt;li&gt;https://www.geeksforgeeks.org/copy-python-deep-copy-shallow-copy/ (It’s Python but I thought the fundamental is the same… maybe not?)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="golang" /><summary type="html">When creating copies of arrays or objects one can make a deep copy or a shallow copy.</summary></entry><entry><title type="html">C++에서 Passing by Reference란?</title><link href="http://localhost:4000/2018/11/24/passing-by-reference.html" rel="alternate" type="text/html" title="C++에서 Passing by Reference란?" /><published>2018-11-24T00:00:00+09:00</published><updated>2018-11-24T00:00:00+09:00</updated><id>http://localhost:4000/2018/11/24/passing-by-reference</id><content type="html" xml:base="http://localhost:4000/2018/11/24/passing-by-reference.html">&lt;p&gt;Pass-by-reference means to pass the &lt;em&gt;reference of an argument&lt;/em&gt; in the calling function to the corresponding &lt;em&gt;formal parameter of the called function&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The called function(callee) can modify the value of the argument by using its reference passed in.&lt;/p&gt;

&lt;p&gt;The reference parameters are initialized with the actual arguments &lt;strong&gt;when the function is called&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swapnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;swapnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A is %d and B is %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To modify a reference that is qualified by the const qualifier, use &lt;code class=&quot;highlighter-rouge&quot;&gt;const_cast&lt;/code&gt; operator to cast away its constness.&lt;/p&gt;

&lt;p&gt;(Maybe it would be strange to change the value of const variable)&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;compared-to-pass-by-value&quot;&gt;Compared to pass-by-value&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Pass-by-reference does not copy the arguments. (More efficient)&lt;/li&gt;
  &lt;li&gt;Actual modification is made with pass-by-reference, while pass-by-value is not.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;compared-to-pass-by-pointer&quot;&gt;Compared to pass-by-pointer&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Pointers can be NULL or reassigned whereas references cannot.&lt;/li&gt;
  &lt;li&gt;Use pass-by-pointer if NULL is a valid parameter value or if you want to reassign the pointer.&lt;/li&gt;
  &lt;li&gt;Otherwise, use constant or non-constant references to pass arguments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;my-thought&quot;&gt;My thought&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;It would be generally better to use reference than value/pointer.&lt;/li&gt;
  &lt;li&gt;Let’s use const reference instead of value.&lt;/li&gt;
  &lt;li&gt;Let’s use reference instead of pointer when we definitely don’t need NULL.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;see-also&quot;&gt;See also&lt;/h2&gt;
&lt;p&gt;https://www.ibm.com/support/knowledgecenter/en/SSLTBW_2.3.0/com.ibm.zos.v2r3.cbclx01/cplr233.htm&lt;/p&gt;</content><author><name></name></author><category term="c++" /><summary type="html">Pass-by-reference means to pass the reference of an argument in the calling function to the corresponding formal parameter of the called function.</summary></entry><entry><title type="html">HTTP header 중 content-type에 대해 알아보자</title><link href="http://localhost:4000/2018/11/24/content-type.html" rel="alternate" type="text/html" title="HTTP header 중 content-type에 대해 알아보자" /><published>2018-11-24T00:00:00+09:00</published><updated>2018-11-24T00:00:00+09:00</updated><id>http://localhost:4000/2018/11/24/content-type</id><content type="html" xml:base="http://localhost:4000/2018/11/24/content-type.html">&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; entity header is used to indicate the &lt;strong&gt;media type&lt;/strong&gt; of the resource.&lt;/p&gt;

&lt;h2 id=&quot;prevent-mime-sniffing&quot;&gt;Prevent MIME sniffing&lt;/h2&gt;
&lt;p&gt;Browsers will do &lt;em&gt;MIME sniffing&lt;/em&gt; in some cases and will not necessarily follow the value of this header; to prevent this behavior, the header &lt;code class=&quot;highlighter-rouge&quot;&gt;X-Content-Type-Options&lt;/code&gt; can be set to &lt;code class=&quot;highlighter-rouge&quot;&gt;nosniff&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;MIME sniffing: Content sniffing, also known as media type sniffing or MIME sniffing, is the practice of inspecting the content of a byte stream to attempt to deduce the file format of the data within it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;syntax&quot;&gt;Syntax&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Type: text/html; charset=utf-8
Content-Type: multipart/form-data; boundary=something
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;directives&quot;&gt;Directives&lt;/h2&gt;
&lt;h3 id=&quot;media-type&quot;&gt;media-type&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;MIME type&lt;/em&gt; of the resource of the data&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;MIME type: Multipurpose Internet Mail Extensions (MIME) type is a standard that indicates the nature and format of a document, file, or assortment of bytes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;charset&quot;&gt;charset&lt;/h3&gt;
&lt;p&gt;The character encoding standard&lt;/p&gt;

&lt;h3 id=&quot;boundary&quot;&gt;boundary&lt;/h3&gt;
&lt;p&gt;For multipart entities the &lt;code class=&quot;highlighter-rouge&quot;&gt;boundary&lt;/code&gt; directive is required, which consists of 1 to 70 characters from a set of characters known to be very robust through email gateways, and not ending with white space. It is used to encapsulate the boundaries of the multiple parts of the message. Often the header boundary is prepended by two dashes(–) in the body and the final boundary also have a two dashes appended to it.&lt;/p&gt;

&lt;h2 id=&quot;content-type-on-http-post-method&quot;&gt;Content-Type on HTTP POST method&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;application/x-www-form-urlencoded&lt;/code&gt;: Encoded to key-value tuple. (splitted by ‘&amp;amp;’, connected by ‘=’) Non-alphabet symbol is percent-encoded. So &lt;strong&gt;this content type is not suitable to binary data&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;application/form-data&lt;/code&gt;: can be used for binary data.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;text/plain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&quot;in-html-forms-enctype&quot;&gt;in HTML forms: enctype&lt;/h3&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enctype=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;description&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myFile&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;parsing-multipartform-data-in-expressjs&quot;&gt;Parsing &lt;code class=&quot;highlighter-rouge&quot;&gt;multipart/form-data&lt;/code&gt; in express.js&lt;/h3&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;multer&lt;/code&gt; library to parse &lt;code class=&quot;highlighter-rouge&quot;&gt;multipart/form-data&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'multuer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;memoryStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/api/image'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cell'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// payload is stored in `req.file.buffer`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;See also: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="web" /><category term="http" /><summary type="html">The Content-Type entity header is used to indicate the media type of the resource.</summary></entry><entry><title type="html">C와 C++의 header file은 뭘 위한 걸까?</title><link href="http://localhost:4000/2018/11/24/c-header-file.html" rel="alternate" type="text/html" title="C와 C++의 header file은 뭘 위한 걸까?" /><published>2018-11-24T00:00:00+09:00</published><updated>2018-11-24T00:00:00+09:00</updated><id>http://localhost:4000/2018/11/24/c-header-file</id><content type="html" xml:base="http://localhost:4000/2018/11/24/c-header-file.html">&lt;h2 id=&quot;purpose&quot;&gt;Purpose?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;To hold declarations for other files to use.&lt;/li&gt;
  &lt;li&gt;Typically only contain declarations, do not define how something is &lt;em&gt;implemented&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;standard-library-header-files&quot;&gt;Standard library header files&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Standard libary function is implemented in the C++ runtime support library, which is automatically linked into the program during the link phase.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://www.learncpp.com/images/CppTutorial/Section1/IncludeLibrary.png&quot; alt=&quot;iostream-library-linking&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;use-header-file-instead-of-forward-declaration&quot;&gt;Use header file instead of forward declaration&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;We need a forward declaration so that the compiler would know about the function (even it is implemented in the another file) when compiling.&lt;/li&gt;
  &lt;li&gt;However, writing forward declarations for every function that lives in another file can is tedious.&lt;/li&gt;
  &lt;li&gt;A header file only has to be written once, and it can be included in as many files as needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;header-guard&quot;&gt;Header guard&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Header guards prevent a given header file from being #included more than once in the same file.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef ADD_H   // can be any unique name
#define ADD_H
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-compiler-work-with-header-files&quot;&gt;How Compiler work with header files?&lt;/h2&gt;

&lt;p&gt;When the compiler compiles the &lt;code class=&quot;highlighter-rouge&quot;&gt;#include &quot;some_header.h&quot;&lt;/code&gt;, It simply copies the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;some_header.h&lt;/code&gt; into the current file at that point. Consequently, program will compile and link correctly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.learncpp.com/images/CppTutorial/Section1/IncludeHeader.png&quot; alt=&quot;compile-and-linking-with-header&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;headerh-vs-headerh&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;header.h&amp;gt;&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;header.h&quot;&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Angled brackets(&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;gt;&lt;/code&gt;): compiler looks for the header in the system directories.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Double-quotes(&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;): compiler looks for the header file in the current directory containing the source code. If not found, it will check any other include paths specified in compiler/IDE settings. That failing, it will fall back to checking the system directories.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;best-practices&quot;&gt;Best practices&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Always include header guards.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do not define variables in header files unless they are constants. Header files should generally only be used for declarations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do not define functions in header files.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each header file should have a specific job, and be as independent as possible. For example, you might put all your declarations related to functionality A in A.h and all your declarations related to functionality B in B.h. That way if you only care about A later, you can just include A.h and not get any of the stuff related to B.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Give your header files the same name as the source files they’re associated with (e.g. grades.h goes with grades.cpp).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Try to minimize the number of other header files you #include in your header files. Only #include what is necessary.
Do not #include .cpp files.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;see-also&quot;&gt;See also&lt;/h2&gt;

&lt;p&gt;Referred from: https://www.learncpp.com/cpp-tutorial/19-header-files/&lt;/p&gt;</content><author><name></name></author><category term="c++" /><category term="c" /><summary type="html">Purpose? To hold declarations for other files to use. Typically only contain declarations, do not define how something is implemented.</summary></entry><entry><title type="html">JSMobileConf 2018 Day 2 노트</title><link href="http://localhost:4000/2018/10/27/jsmobileconf-day2.html" rel="alternate" type="text/html" title="JSMobileConf 2018 Day 2 노트" /><published>2018-10-27T00:00:00+09:00</published><updated>2018-10-27T00:00:00+09:00</updated><id>http://localhost:4000/2018/10/27/jsmobileconf-day2</id><content type="html" xml:base="http://localhost:4000/2018/10/27/jsmobileconf-day2.html">&lt;h2 id=&quot;standardizing-javascript&quot;&gt;Standardizing JavaScript&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What makes a standard “Open”?&lt;/li&gt;
  &lt;li&gt;How open is JavaScript?
    &lt;ul&gt;
      &lt;li&gt;Organizational Membership&lt;/li&gt;
      &lt;li&gt;Consensus Seeking&lt;/li&gt;
      &lt;li&gt;Improved Tooling&lt;/li&gt;
      &lt;li&gt;Worldwide Standard&lt;/li&gt;
      &lt;li&gt;Royalty-Free IP&lt;/li&gt;
      &lt;li&gt;Test262 - test suite&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/proposals&quot;&gt;GitHub - tc39/proposals: Tracking ECMAScript Proposals&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;building-an-innovation-engine-inside-your-org&quot;&gt;Building an Innovation Engine Inside your Org&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Basecamp
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://basecamp.com/&quot;&gt;Basecamp: Project Management &amp;amp; Team Communication Software&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Creativity
    &lt;ul&gt;
      &lt;li&gt;Embracing Constraints: Time, Money, Resources, People, Laws of Physics&lt;/li&gt;
      &lt;li&gt;Scientific Method&lt;/li&gt;
      &lt;li&gt;Guiding Principles
        &lt;ul&gt;
          &lt;li&gt;Culture of Learning&lt;/li&gt;
          &lt;li&gt;Rapid Prototyping&lt;/li&gt;
          &lt;li&gt;Short Loops&lt;/li&gt;
          &lt;li&gt;Product-Market Fit&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Incubator vs. Accelerator&lt;/li&gt;
      &lt;li&gt;Playground (X) no long term vision&lt;/li&gt;
      &lt;li&gt;TEAM: Hustler + Hacker + Hipster&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Success Metrics
    &lt;ul&gt;
      &lt;li&gt;Acquisition&lt;/li&gt;
      &lt;li&gt;Activation&lt;/li&gt;
      &lt;li&gt;Retention&lt;/li&gt;
      &lt;li&gt;Revenue&lt;/li&gt;
      &lt;li&gt;Referral&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Single necessary: paying customer&lt;/li&gt;
  &lt;li&gt;Books: the lean startup, zero one, the innovators dilemma&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vs-live-share-can-do-that&quot;&gt;VS Live Share Can do That?&lt;/h2&gt;
&lt;p&gt;Microsoft Azure Team&lt;/p&gt;

&lt;p&gt;Javascript in Azure&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fivethin.gs/&quot;&gt;5 Things :: A show about JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VS Code Extension: Live Share
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare-pack&amp;amp;WT.mc_id=vslivesharecandothat-webunleashed-buhollan&quot;&gt;VS Live Share Extension Pack - Visual Studio Marketplace&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Focusing&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Guest permission&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Debugger Attach: share port required&lt;/li&gt;
      &lt;li&gt;Sharing port: any process expose TCP port, database!&lt;/li&gt;
      &lt;li&gt;Share files, share entire environment&lt;/li&gt;
      &lt;li&gt;Share terminal&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;building-progressive-web-apps&quot;&gt;Building Progressive Web Apps&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What is PWA?
    &lt;ul&gt;
      &lt;li&gt;Reliable : offline&lt;/li&gt;
      &lt;li&gt;Fast: cache&lt;/li&gt;
      &lt;li&gt;Engaging: push notifications, installation, pretty theme&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PWA metric
    &lt;ul&gt;
      &lt;li&gt;respond 200 when off-line&lt;/li&gt;
      &lt;li&gt;prompted to install&lt;/li&gt;
      &lt;li&gt;register a server worker&lt;/li&gt;
      &lt;li&gt;fallback when JS isn’t available&lt;/li&gt;
      &lt;li&gt;custom splash screen&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Being Reliable
    &lt;ul&gt;
      &lt;li&gt;Caching; for offline&lt;/li&gt;
      &lt;li&gt;Fallback; when no javascript enabled&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ng add @angular/pwa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Select &lt;code class=&quot;highlighter-rouge&quot;&gt;Progressive Web App&lt;/code&gt; support when generating a project using angular/react CLI&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Being Fast
    &lt;ul&gt;
      &lt;li&gt;Server side rendering&lt;/li&gt;
      &lt;li&gt;lazy loading&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Being Engaging
    &lt;ul&gt;
      &lt;li&gt;app-manifest.firebaseapp.com&lt;/li&gt;
      &lt;li&gt;link manifest.json file&lt;/li&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;[웹 앱 매니페스트  &lt;/td&gt;
              &lt;td&gt;  Web       &lt;/td&gt;
              &lt;td&gt;  Google Developers](https://developers.google.com/web/fundamentals/web-app-manifest/?hl=ko)&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Evaluation
    &lt;ul&gt;
      &lt;li&gt;Run Audits on Chrome&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;everything-you-need-to-node&quot;&gt;Everything You Need To Node&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The Usual Suspects: microservices, backend&lt;/li&gt;
  &lt;li&gt;The Unusual suspects: realtime apps, game, machine learning, universal rendering, file reading/parsing, IoT&lt;/li&gt;
  &lt;li&gt;Non-blocking, event-driven single thread architecture&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;‘push technology’ for web socket&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;WebSocket: for collaboration
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.bitsrc.io/8-node-js-web-socket-libraries-for-2018-818e7e5b67cf&quot;&gt;8 Node.js Web Socket Libraries for 2018 – Bits and Pieces&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://chat.meatspac.es/&quot;&gt;meatspace&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://js.tensorflow.org/&quot;&gt;TensorFlow.js&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Playing Mortal Combat with &lt;code class=&quot;highlighter-rouge&quot;&gt;TensorFlow.js&lt;/code&gt; Transfer learning and data augmentation&lt;/li&gt;
      &lt;li&gt;https://blog.mgechev.com&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Taking over the universal rendering
    &lt;ul&gt;
      &lt;li&gt;Server-Side Rendering&lt;/li&gt;
      &lt;li&gt;ssr.vuejs.org&lt;/li&gt;
      &lt;li&gt;SSR in Angular 5+&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;File reading &amp;amp; parsing
    &lt;ul&gt;
      &lt;li&gt;https://nodejs.org: synchronously, asynchronously treating files
  -&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IoT for you and mewww.crowdcast.io/e/dshawaf8
    &lt;ul&gt;
      &lt;li&gt;https://tessel.io/ Tessel microcontroller&lt;/li&gt;
      &lt;li&gt;johnny-five.io&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Realtime Vue &amp;amp; Node chat Progressive Web App&lt;/li&gt;
  &lt;li&gt;github.com/tzmanics/tosh-my-gosh&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;design-for-the-mixed-reality-world&quot;&gt;Design for the Mixed Reality World&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Mixed Reality(MR)&lt;/li&gt;
  &lt;li&gt;Extended Reality(XR)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@northof41/what-really-is-the-difference-between-ar-mr-vr-xr-35bed1da1a4e&quot;&gt;What really is the difference between AR / MR / VR / XR ?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Control: how to interact?
    &lt;ul&gt;
      &lt;li&gt;User testing&lt;/li&gt;
      &lt;li&gt;Behaviour&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-to-write-great-docs-as-a-bad-writer&quot;&gt;How to Write Great Docs as a Bad Writer&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chrisvfritz?tab=repositories&quot;&gt;chrisvfritz (Chris Fritz) / Repositories · GitHub&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why write docs?
    &lt;ul&gt;
      &lt;li&gt;A feature doesn’t exist until it’s documented.&lt;/li&gt;
      &lt;li&gt;Documentation Driven Development&lt;/li&gt;
      &lt;li&gt;Writing docs is personally useful&lt;/li&gt;
      &lt;li&gt;Permission to ask questions (ask what is not in documentation)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;What’s the goal of documentation?
    &lt;ul&gt;
      &lt;li&gt;Manage emotions: readers should feel smart, powerful, curious&lt;/li&gt;
      &lt;li&gt;Do not bore, frustrate, confuse reader -&amp;gt; they stop reading&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Personas&lt;/strong&gt; (character profile)
    &lt;ul&gt;
      &lt;li&gt;Who are you serving? (Who are the docs actually for?)&lt;/li&gt;
      &lt;li&gt;How are they using your docs?&lt;/li&gt;
      &lt;li&gt;What are they looking for?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Very specific stories
    &lt;ul&gt;
      &lt;li&gt;Are they being interrupted?&lt;/li&gt;
      &lt;li&gt;Are they have enough time?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Organizing docs
    &lt;ul&gt;
      &lt;li&gt;Intros (5 minutes)&lt;/li&gt;
      &lt;li&gt;References: API listing, Examples/cookbook&lt;/li&gt;
      &lt;li&gt;Expert guides: In-depth topics, Style guide&lt;/li&gt;
      &lt;li&gt;Overlap is normal&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Trade-offs
    &lt;ul&gt;
      &lt;li&gt;simple..thorough&lt;/li&gt;
      &lt;li&gt;beginners..experts&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;What to write first?
    &lt;ul&gt;
      &lt;li&gt;Maximize &lt;code class=&quot;highlighter-rouge&quot;&gt;power&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;effort&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Don’t start with the solution/feature, &lt;strong&gt;Start with the problem&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;(X) Using props&lt;/li&gt;
      &lt;li&gt;(O) Passing data to child components with props&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Avoid humor&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Respect other people’s time&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Reviewers can’t make docs good unless the doc is already good&lt;/li&gt;
  &lt;li&gt;Avoid obsessive perfectionism&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Is everything OK?&lt;br /&gt;
&lt;em&gt;Listen -&amp;gt; Mirror -&amp;gt; Validate -&amp;gt; Negotiate&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;panel-discussion&quot;&gt;Panel Discussion&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/learn-vuejs/vue-patterns&quot;&gt;GitHub - learn-vuejs/vue-patterns: Useful Vue patterns, techniques, tips and tricks and helpful curated links.&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="conference" /><category term="javascript" /><summary type="html">Standardizing JavaScript What makes a standard “Open”? How open is JavaScript? Organizational Membership Consensus Seeking Improved Tooling Worldwide Standard Royalty-Free IP Test262 - test suite</summary></entry><entry><title type="html">JSMobileConf 2018 Day 1 노트</title><link href="http://localhost:4000/2018/10/26/jsmobileconf-day1.html" rel="alternate" type="text/html" title="JSMobileConf 2018 Day 1 노트" /><published>2018-10-26T00:00:00+09:00</published><updated>2018-10-26T00:00:00+09:00</updated><id>http://localhost:4000/2018/10/26/jsmobileconf-day1</id><content type="html" xml:base="http://localhost:4000/2018/10/26/jsmobileconf-day1.html">&lt;h2 id=&quot;keynote-evolution-of-the-javascript&quot;&gt;Keynote: Evolution of the JavaScript&lt;/h2&gt;
&lt;h3 id=&quot;from-2007-web---smartphone&quot;&gt;From 2007: web -&amp;gt; smartphone&lt;/h3&gt;

&lt;h3 id=&quot;2009---2010-mobile-web-environment&quot;&gt;2009 - 2010: mobile web environment&lt;/h3&gt;

&lt;h3 id=&quot;2013-web-hybrid-vs-100-native&quot;&gt;2013: “Web hybrid” vs. “100% Native”&lt;/h3&gt;
&lt;h3 id=&quot;2015-react-native--nativescript&quot;&gt;2015: React native &amp;amp; NativeScript&lt;/h3&gt;

&lt;h3 id=&quot;nativescript&quot;&gt;NativeScript&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Plugins / external contributions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Instant Start CLI framework
    &lt;ul&gt;
      &lt;li&gt;run a CLI, simple command, simplify startup&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HMR(Hot Module Replacement)
    &lt;ul&gt;
      &lt;li&gt;without reloading, refresh&lt;/li&gt;
      &lt;li&gt;maintain app state as code changes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reusing existing web technology and resource&lt;/li&gt;
  &lt;li&gt;Code reuse: web&amp;amp; mobile code sharing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2018-sharing-code-between-web--mobile&quot;&gt;2018: Sharing code between Web &amp;amp; Mobile&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Still hard problem: offline, data sync, CD, legacy code..&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Be ready for the future&lt;br /&gt;
Bet on Javascript (again)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;responsive-design-beyond-our-devices&quot;&gt;Responsive Design: Beyond Our Devices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Digital Design&lt;/li&gt;
  &lt;li&gt;Pages to Patterns&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Layout for all the devices&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;a network of content rearranged by all size of display&lt;/li&gt;
  &lt;li&gt;Design the &lt;strong&gt;priority&lt;/strong&gt; not the layout: content hierarchy before layout&lt;/li&gt;
  &lt;li&gt;“teaser”&lt;/li&gt;
  &lt;li&gt;flex-direction&lt;/li&gt;
  &lt;li&gt;Feature Queries: @supports Rule
    &lt;ul&gt;
      &lt;li&gt;“Support” doesn’t mean the exactly same experience on all devices&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Conditionally enhanced layout (&lt;code class=&quot;highlighter-rouge&quot;&gt;.has-flex&lt;/code&gt;, .&lt;code class=&quot;highlighter-rouge&quot;&gt;has-flex-wrap&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Like cars designed to perform in extreme heat or on icy road, web should treat non-ideal environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Input method / screen size / network speed / network condition&lt;/p&gt;

&lt;p&gt;Pattern library/Style guide: &lt;a href=&quot;https://www.starbucks.com/static/reference/styleguide/&quot;&gt;Style Guide&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We should start with language, not interfaces.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Naming the element in the pattern library helps &lt;strong&gt;consistency&lt;/strong&gt; and avoid &lt;strong&gt;duplications&lt;/strong&gt; with other designers&lt;/li&gt;
  &lt;li&gt;We need consistent and meaningful terms for the design pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Responsive-Design-Principles-Ethan-Marcotte/dp/1937557332&quot;&gt;Responsive Design: Patterns &amp;amp; Principles: Ethan Marcotte: 9781937557331: Amazon.com: Books&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;blockchain-crash-course&quot;&gt;Blockchain Crash Course&lt;/h2&gt;
&lt;p&gt;By &lt;a href=&quot;https://getcrescendo.co/&quot;&gt;Crescendo&lt;/a&gt; CTO&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Centralized System&lt;/li&gt;
  &lt;li&gt;Build trust, consistency&lt;/li&gt;
  &lt;li&gt;Set of same data&lt;/li&gt;
  &lt;li&gt;PrevHash: immutability, one-way hash&lt;/li&gt;
  &lt;li&gt;Add transaction -&amp;gt; consensus protocol [vote]&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Network protocol: how do peers communicate&lt;br /&gt;
Consensus protocol: how are decisions made&lt;br /&gt;
	- Proof of Work: difficult puzzle&lt;br /&gt;
	- Proof of Stake: stake -&amp;gt; ownership&lt;br /&gt;
Transaction protocol: what makes transactions valid&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use case: Spotify / MedicalChain: ‘누가’ 로열티를 받을지, product의 유통 과정&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Blockchain with JS&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;JS as a front-end
        &lt;ul&gt;
          &lt;li&gt;Solidity&lt;/li&gt;
          &lt;li&gt;Ethereum&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;JS driving the car
        &lt;ul&gt;
          &lt;li&gt;Lotion.js: &lt;a href=&quot;https://github.com/keppel/lotion&quot;&gt;GitHub - keppel/lotion: ✨ Smooth, easy blockchain apps ✨&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;Tendermint&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://blockgeeks.com/&quot;&gt;Blockchain community - Blockgeeks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;@thetrendytechie
&lt;a href=&quot;https://github.com/thetrendytechie/bed-and-blockchain&quot;&gt;GitHub - thetrendytechie/bed-and-blockchain: Simple decentralized booking system dapp built with Solidity and Truffle&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;one-project-one-language-three-apps&quot;&gt;One Project, One Language, Three Apps&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.nativescript.org/angular/code-sharing/intro&quot;&gt;Code Sharing Introduction&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;boosting-your-development-experience-with-webpack-and-hot-module-replacement&quot;&gt;Boosting Your Development Experience with Webpack and Hot Module Replacement&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Hot Module Replacement&lt;/li&gt;
  &lt;li&gt;TNS preview: no Android/iOS setup&lt;/li&gt;
  &lt;li&gt;Webpack
    &lt;ul&gt;
      &lt;li&gt;Every Javascript file is a module&lt;/li&gt;
      &lt;li&gt;Every HTML file is a module&lt;/li&gt;
      &lt;li&gt;Every CSS file is a module&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Angular - native script no HMR default&lt;/li&gt;
  &lt;li&gt;State Management
    &lt;ul&gt;
      &lt;li&gt;Redux, ngRX, ngXS, akita&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/NativeScript/NativeScript/issues/6398&quot;&gt;Tracking🔥Hot Module Replacement with webpack · Issue  · NativeScript/NativeScript · GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;boosting-the-iot-to-your-will-with-javascript&quot;&gt;Boosting the IoT to Your Will with Javascript&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Smartfin(&lt;a href=&quot;https://www.surfrider.org/programs/smartfin&quot;&gt;Smartfin - Surfrider Foundation&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Connectivity in sensors&lt;/li&gt;
  &lt;li&gt;Get data from the sensors -&amp;gt; build an application&lt;/li&gt;
  &lt;li&gt;Particle Cloud: &lt;a href=&quot;https://github.com/particle-iot/particle-api-js&quot;&gt;GitHub - particle-iot/particle-api-js: JS Library for the Particle API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NativeScript Particle Plugin&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Building IoT cloud apps
    &lt;ol&gt;
      &lt;li&gt;Cloud backhaul (AWS IoT, google IoT)&lt;/li&gt;
      &lt;li&gt;Cloud Workflow (NODE-RED, LOSANT)&lt;/li&gt;
      &lt;li&gt;Cloud processing (IBM Watson)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lean-native&quot;&gt;Lean Native&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Pre-build
    &lt;ol&gt;
      &lt;li&gt;Validate problem
        &lt;ul&gt;
          &lt;li&gt;pain level metric&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Validate solution
        &lt;ul&gt;
          &lt;li&gt;enthusiasm level + referrals(bonus) + writing a check(bonus!! - B2B)&lt;/li&gt;
          &lt;li&gt;it is worth to introduce to someone&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Validate channel: landing page, Sales/Marketing&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;MVP
    &lt;ol&gt;
      &lt;li&gt;Early Adopters&lt;/li&gt;
      &lt;li&gt;Validate acquisition(total cost/acquiring customers)&lt;/li&gt;
      &lt;li&gt;Determine value: know your cohorts&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Growth
    &lt;ol&gt;
      &lt;li&gt;Channel Optimization&lt;/li&gt;
      &lt;li&gt;Acquisition loops&lt;/li&gt;
      &lt;li&gt;Retention loops&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="conference" /><category term="javascript" /><summary type="html">Keynote: Evolution of the JavaScript From 2007: web -&amp;gt; smartphone</summary></entry><entry><title type="html">Golang closure</title><link href="http://localhost:4000/2018/10/11/closure.html" rel="alternate" type="text/html" title="Golang closure" /><published>2018-10-11T00:00:00+09:00</published><updated>2018-10-11T00:00:00+09:00</updated><id>http://localhost:4000/2018/10/11/closure</id><content type="html" xml:base="http://localhost:4000/2018/10/11/closure.html">&lt;p&gt;Go supports &lt;strong&gt;anonymous function&lt;/strong&gt; (also known as &lt;strong&gt;function literal&lt;/strong&gt;, &lt;strong&gt;lambda abstraction&lt;/strong&gt;, or &lt;strong&gt;lambda expression&lt;/strong&gt;), which can form &lt;strong&gt;closures&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Anonymous function&lt;/em&gt; is a function definition that is not bound to an &lt;em&gt;identifier&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Closure&lt;/em&gt; is a function value that references variables from outside its body&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;example-ginkgo&quot;&gt;Example: ginkgo&lt;/h2&gt;

&lt;p&gt;Ginkgo makes extensive use of clousres to allow building descriptive test suites.&lt;/p&gt;

&lt;p&gt;In order to share state between a &lt;code class=&quot;highlighter-rouge&quot;&gt;BeforeEach&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;It&lt;/code&gt;, use closure variables, typically defined at the top of the most relevant &lt;code class=&quot;highlighter-rouge&quot;&gt;Describe&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Context&lt;/code&gt; container.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;BeforeEach&lt;/code&gt; is run before each spec thereby ensuring that each spec has a pristine copy of the state. Common state is shared using &lt;strong&gt;closure variables&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;var book Book&lt;/code&gt; in this case). You can also perform clean up in &lt;code class=&quot;highlighter-rouge&quot;&gt;AfterEach&lt;/code&gt; blocks.&lt;/p&gt;

&lt;p&gt;The important thing is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is also a mistake to initialize a closure variable in a container block. If one of your &lt;code class=&quot;highlighter-rouge&quot;&gt;It&lt;/code&gt;s mutates that variable, subsequent &lt;code class=&quot;highlighter-rouge&quot;&gt;It&lt;/code&gt;s will receive the mutated value. This is a case of test pollution and can be hard to track down. Always initialize your variables in &lt;code class=&quot;highlighter-rouge&quot;&gt;BeforeEach&lt;/code&gt; blocks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;5-userful-ways-to-use-closures-in-go&quot;&gt;5 Userful Ways to Use Closures in Go&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.calhoun.io/5-useful-ways-to-use-closures-in-go/&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="golang" /><summary type="html">Go supports anonymous function (also known as function literal, lambda abstraction, or lambda expression), which can form closures.</summary></entry><entry><title type="html">babel cheat sheet</title><link href="http://localhost:4000/2018/09/17/babel-basic.html" rel="alternate" type="text/html" title="babel cheat sheet" /><published>2018-09-17T00:00:00+09:00</published><updated>2018-09-17T00:00:00+09:00</updated><id>http://localhost:4000/2018/09/17/babel-basic</id><content type="html" xml:base="http://localhost:4000/2018/09/17/babel-basic.html">&lt;h2 id=&quot;install-babel&quot;&gt;Install babel&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save-dev @babel/core @babel/cli&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;pluginpresets&quot;&gt;Plugin/Presets&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save-dev @babel/preset-env&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;babel-compile&quot;&gt;Babel Compile&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./node_modules/.bin/babel src --out-dir lib --presets=@babel/env&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts&lt;/code&gt;에 추가하면 더 편하게 쓸 수 있다.&lt;/p&gt;

&lt;p&gt;내 경우에는 path 치는 게 귀찮아서 &lt;code class=&quot;highlighter-rouge&quot;&gt;babel-cli&lt;/code&gt;를 global로 깔아놓고 쓰고 있다.&lt;/p&gt;

&lt;h2 id=&quot;추가할-것&quot;&gt;추가할 것&lt;/h2&gt;

&lt;p&gt;gulp나 webpack 등과 연동해서 사용하는 방법도 익혀보자.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://babeljs.io/docs/en/next/usage&quot;&gt;Babel docs&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="web" /><category term="javascript" /><summary type="html">Install babel</summary></entry></feed>